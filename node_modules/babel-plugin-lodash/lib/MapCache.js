'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function clear(store) {
  toArray.cache.clear();
}

function clearDeep(store) {
  clear(store);
  store.__data__.clear();
}

function findEntry(map, iteratee) {
  return _lodash2.default.find(toArray(map), function (entry) {
    return iteratee(entry[1], entry[0], map);
  });
}

var toArray = _lodash2.default.memoize(_lodash2.default.toArray);

/*----------------------------------------------------------------------------*/

var MapCache = function () {
  function MapCache(values) {
    _classCallCheck(this, MapCache);

    this.__data__ = new Map(values);
  }

  _createClass(MapCache, [{
    key: 'clear',
    value: function clear() {
      clearDeep(this);
      return this;
    }
  }, {
    key: 'delete',
    value: function _delete(key) {
      clear(this);
      return this.__data__.delete(key);
    }
  }, {
    key: 'find',
    value: function find(iteratee) {
      return _lodash2.default.nth(findEntry(this.__data__, iteratee), 1);
    }
  }, {
    key: 'findKey',
    value: function findKey(iteratee) {
      return _lodash2.default.first(findEntry(this.__data__, iteratee));
    }
  }, {
    key: 'get',
    value: function get(key) {
      return this.__data__.get(key);
    }
  }, {
    key: 'has',
    value: function has(key) {
      return this.__data__.has(key);
    }
  }, {
    key: 'set',
    value: function set(key, value) {
      clear(this);
      this.__data__.set(key, value);
      return this;
    }
  }, {
    key: Symbol.iterator,
    get: function get() {
      return this.__data__[Symbol.iterator]();
    }
  }]);

  return MapCache;
}();

exports.default = MapCache;
;
module.exports = exports['default'];